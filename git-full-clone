#! /usr/bin/env bash
# SPDX-License-Identifier: MIT

###############################   LICENSE TEXT   ###############################
#                                                                              #
#  This file is part of collection of scripts and tools created for my         #
#  personal needs. Usefulness to others might exists                           #
#                                                                              #
#  Copyright Â© 2020  Chindraba (Ronald Lamoreaux)                              #
#                    <tools@chindraba.work>                                    #
#  - All Rights Reserved                                                       #
#                                                                              #
#  Permission is hereby granted, free of charge, to any person obtaining a     #
#  copy of this software and associated documentation files (the "Software"),  #
#  to deal in the Software without restriction, including without limitation   #
#  the rights to use, copy, modify, merge, publish, distribute, sublicense,    #
#  and/or sell copies of the Software, and to permit persons to whom the       #
#  Software is furnished to do so, subject to the following conditions:        #
#                                                                              #
#  The above copyright notice and this permission notice shall be included in  #
#  all copies or substantial portions of the Software.                         #
#                                                                              #
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  #
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,    #
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE #
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER      #
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING     #
#  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER         #
#  DEALINGS IN THE SOFTWARE.                                                   #
#                                                                              #
################################################################################

################################   DESCRPTION   ################################
#                                                                              #
#  Clone a repository from a remote source and retrieve ALL the branches.      #
#  The normal clone only retrieves the active branch and adds refs to the      #
#  remaining remote branches. In the event the repo should become lost, or if  #
#  the goal is to move the repo to another host, all the other branches would  #
#  be lost.                                                                    #
#                                                                              #
################################################################################

# Requires the url, in either of two formats:
#   https://domain.tld/path/to/repo.git or
#   git@domain.tld:path/to/repo.git
# All other valid git url formats are not handled, and will have unknown effects.
# Optionally the remote name can be supplied, and will be used instead of origin.
#   A good alternative, and the built in default, is upstream.
#
# To "install" this script, place it, or symlink to it, somewhere in your path. If
# the name is kept the git command will execute it like any other git command when
# used as git full-clone, rather than using the command git-full-clone. In theory,
# this will allow the command to be available to other interfaces than just the
# command line.

# There is no provisions to pass other command options to the regular git command.
# Consequently the clone will be placed in a subdirectory of the current directory
# and be named the same as the repository's base name, with all leading path info
# stripped.

usage() {
    printf "git %s <%s> [<%s>]\n" "full-clone" "url to clone" "remote name"
    exit 1
}

[ -z "${1}" ] && usage
[[ "${1}" =~ ^http ]] \
    && clone_uri="${1#https://*/}" \
    || clone_uri="${1##*:}"
repo_part="${clone_uri##*/}"
repo_name="${repo_part%%.git}"
repo_path="${clone_uri%%/${repo_part}}"
[ -z "${2}" ] && remote_name='upstream' || remote_name="${2}"
git clone --origin "${remote_name}" "${1}"
pushd "${repo_name}" >/dev/null
curr_branch="$(git branch -a | grep ^\*|awk -e '{printf $2"\n"}')"
for target_branch in $(git branch -a | grep ${remote_name} | grep -v HEAD | awk -F "${remote_name}/" -e '{printf $2"\n"}'); do
    [ ${target_branch} == "${curr_branch}" ] || { 
        git checkout "${target_branch}" --
        git checkout --quiet "${curr_branch}" -- 2>/dev/null
    }
done
popd >/dev/null
